name: Python CI

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'cpp/**'
      - '**.md'
      - 'benchmarks/**'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - 'cpp/**'
      - '**.md'
      - 'benchmarks/**'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with pytest
      run: |
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        pytest -v --tb=short --ignore=tests/cpp_integration

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      run: |
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        pytest --cov=python.data --cov-report=xml --cov-report=html --ignore=tests/cpp_integration

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black mypy types-setuptools

    - name: Run Black formatter check
      run: |
        black --check python tests --exclude tests/cpp_integration

    - name: Run Ruff linter
      run: |
        ruff check python tests --exclude tests/cpp_integration

    - name: Run MyPy type checker
      run: |
        mypy python --ignore-missing-imports

  validate-models:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate example drawings
      run: |
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        python -m python.data.examples

    - name: Test drawing creation
      run: |
        export PYTHONPATH=${{ github.workspace }}:$PYTHONPATH
        python create_drawing.py

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities with Safety
      run: |
        pip install -r requirements.txt
        safety check --json

    - name: Run Bandit security linter
      run: |
        bandit -r python -f json -o bandit-report.json

    - name: Upload Bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json